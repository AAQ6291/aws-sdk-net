<Project ToolsVersion="4.0" 
	DefaultTargets="full-build-nodocs"
	xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	
    <PropertyGroup>
        <InternalBuildTools Condition="'$(InternalBuildTools)'==''">..\..\AWSDotNetBuildTools</InternalBuildTools>
    </PropertyGroup>
    
	<Import Project="$(InternalBuildTools)\references.targets" Condition="Exists('$(InternalBuildTools)\references.targets')" />
	<Import Project="common.targets" />

    <!-- properties used in documentation generation -->
    <PropertyGroup>
        <!-- the relative location (to the project file) of the generator executable -->
        <DocGeneratorPath>$(MSBuildProjectDirectory)\..\docgenerator\SDKDocGenerator\bin\Release</DocGeneratorPath>
        <DocGenerator>SDKDocGenerator.exe</DocGenerator>
        
        <!-- default expected location of SDK assemblies root if not specified -->
        <SDKAssembliesRoot Condition="'$(SDKAssembliesRoot)'==''">$(MSBuildProjectDirectory)\$(Deployment)\assemblies</SDKAssembliesRoot>
        
        <!-- default output path to ..\DocDeployment\docs if not specified -->
        <DocOutputRoot Condition="'$(DocOutputRoot)'==''">$(MSBuildProjectDirectory)\$(DocDeployment)\docs</DocOutputRoot>
        
		<!-- default location of the documentation samples. This should be the folder ABOVE AWSSDKDocSamples -->
		
		<DocSamplesFolder>$(MSBuildProjectDirectory)\..\docgenerator</DocSamplesFolder>
		
        <!-- use net45 platform as the primary determinant of assemblies to inspect, and generate 
             for all services 
        -->
        <SDKPlatform Condition="'$(SDKPlatform)'==''">net45</SDKPlatform>
        <SDKServices Condition="'$(SDKServices)'==''">*</SDKServices>
		
		<!-- resources folder where test settings should be placed -->
		<TestSettingsLocation>..\sdk\test\CrossPlatformTests\CommonTests\Resources</TestSettingsLocation>
        
    </PropertyGroup>
    
	<Target Name="build-custom-tasks">		
		<MSBuild Projects=".\CustomTasks\CustomTasks.sln"
			Targets="Clean;Build"
			Properties="Configuration=Release" />
	</Target>
	
	<UsingTask TaskName="CustomTasks.UpdateFxCopProject" AssemblyFile=".\CustomTasks\bin\Release\CustomTasks.dll"/>
	
	<Target Name="init" DependsOnTargets="clean;build-custom-tasks"/>

	<Target Name="full-build" DependsOnTargets="test-sdk;copy-assemblies;doc-build;consolidate-docartifacts;save-build"/>

	<Target Name="full-build-nodocs" DependsOnTargets="test-sdk;copy-assemblies;save-build"/>
	
	<Target Name="run-generator">
		<Message Text="Build and run code generator"/>		
		<MSBuild Projects="..\generator\AWSSDKGenerator.sln"
			Targets="Clean;Build"
			Properties="Configuration=Release" />
		<Exec Command="ServiceClientGenerator.exe" 
			WorkingDirectory="..\generator\ServiceClientGenerator\bin\Release"/>
	</Target>

	<Target Name="restore-nuget" DependsOnTargets="run-generator">
		<Message Text="Restore nuget packages"/>
		<Exec Command="..\sdk\.nuget\NuGet.exe restore ..\sdk\AWSSDK.All.sln"/>
	</Target>
	
	<Target Name="build-sdk" DependsOnTargets="restore-nuget;run-generator">
		<Message Text="Compile the SDK"/>
		<MSBuild Projects="..\sdk\AWSSDK.All.sln"
			Targets="Clean;Build"
			Properties="Configuration=Release;AWSKeyFile=$(CustomSnkFileLocation)" />

		<Copy
			SourceFiles="..\generator\ServiceModels\_sdk-versions.json"
			DestinationFolder="$(Deployment)" />
	</Target>
 
	<Target Name="test-sdk" DependsOnTargets="init;build-sdk;fxcop;run-unit-tests;run-integ-tests" />
	<Target Name="run-unit-tests" DependsOnTargets="init;build-sdk">
		<MSBuild
			Projects="$(MSBuildProjectFile)"
			Targets="run-tests"
			Properties="TestContainer=..\sdk\test\UnitTests\bin\Release\net35\AWSSDK.UnitTests.Net35.dll" />
		<MSBuild
			Projects="$(MSBuildProjectFile)"
			Targets="run-tests"
			Properties="TestContainer=..\sdk\test\UnitTests\bin\Release\net45\AWSSDK.UnitTests.Net45.dll" />
	</Target>
	<Target Name="run-integ-tests" DependsOnTargets="init;build-sdk" Condition="'$(RunIntegTests)' != '' And '$(RunIntegTests)' != 'false'">

		<MSBuild
			Projects="$(MSBuildProjectFile)"
			Targets="run-tests"
			Properties="TestContainer=..\sdk\test\IntegrationTests\bin\Release\net45\AWSSDK.IntegrationTests.Net45.dll" />
	</Target>
	
	<Target Name="nuget-pack" DependsOnTargets="build-sdk">
		<Exec LogStandardErrorAsError="true"
              Command="$(powershell) -ExecutionPolicy Unrestricted -NoProfile -File create-nuget-packages.ps1" />		
	</Target>

	<Target Name="copy-assemblies" DependsOnTargets="nuget-pack">
        <Message Text="Collating assemblies for downstream doc generation" />
		<PropertyGroup>
			<CustomSnkPublicKeyToken Condition="'$(CustomSnkPublicKeyToken)' == '' ">71c852f8be1c371d</CustomSnkPublicKeyToken>
		</PropertyGroup>
		<Exec LogStandardErrorAsError="true"
              Command="$(powershell) -ExecutionPolicy Unrestricted -NoProfile -File copy-sdkassemblies.ps1 -PublicKeyTokenToCheck $(CustomSnkPublicKeyToken)" />		
	</Target>
	
	<!-- TEST TARGETS/TASKS -->

	<Target Name="fxcop" DependsOnTargets="init;copy-assemblies" Condition="Exists('$(fxcopcmdexe)')">
		<!-- Update FxCop project files -->
		<UpdateFxCopProject Assemblies="$(Deployment)\assemblies\net35" FxCopProject="..\sdk\SDK-3.5.FxCop" BinSuffix="net35"/>
		<UpdateFxCopProject Assemblies="$(Deployment)\assemblies\net45" FxCopProject="..\sdk\SDK-4.5.FxCop" BinSuffix="net45"/>

		<!-- Compile custom FxCop rules -->
		<MSBuild Projects="..\buildtools\CustomFxCopRules\CustomFxCopRules.sln"
			Targets="Clean;Build"
			Properties="Configuration=Release" />
		
		<!-- Run FxCop -->
		<Exec Command="$(fxcopcmd) /p:..\sdk\SDK-3.5.FxCop /o:..\fxcop-report-3.5.xml /s"/>
		<Exec Command="$(fxcopcmd) /p:..\sdk\SDK-4.5.FxCop /o:..\fxcop-report-4.5.xml /s"/>

		<Error Condition="Exists('..\fxcop-report-3.5.xml') or Exists('..\fxcop-report-4.5.xml')" Text="There are FxCop violations!" />
	</Target>
	
	<Target Name="run-tests">
		<Message Text="TestContainer = $(TestContainer)" Condition="$(TestContainer.Length) > 0"/>
		<Message Text="TestCategory = $(TestCategory)" Condition="$(TestCategory.Length) > 0"/>
		
		<Exec Command="$(devenv2013) /Rebuild Debug .\MSTestWrapper\MSTestWrapper.sln"/>

		<PropertyGroup >
			<Container>/testcontainer:$([System.IO.Path]::GetFullPath($(TestContainer)))</Container>
			<Category></Category>
		</PropertyGroup>
		<PropertyGroup Condition="$(TestCategory.Length) > 0">
			<Category>/category:$(TestCategory)</Category>
		</PropertyGroup>

		<Exec Command=".\MSTestWrapper\MSTestWrapper\bin\Debug\MSTestWrapper.exe  $(mstest2013) &quot;$(Container)&quot; &quot;$(Category)&quot;"/>
		
		<!-- Clear our properties -->
		<PropertyGroup >
			<TestContainer></TestContainer>
			<TestCategory></TestCategory>
		</PropertyGroup>
		<CallTarget Targets="deploy-test-results" />
		<OnError ExecuteTargets="deploy-test-results" />
	</Target>

	<UsingTask TaskName="PrepareTestResults" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
		<ParameterGroup>
			<ResultFile ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					Log.LogMessage("ResultFile = [{0}], formatting", ResultFile);
					string content = File.ReadAllText(ResultFile);
					content = content.Replace("<?xml version=\"1.0\" encoding=\"UTF-8\"?>","<?xml version=\"1.0\" encoding=\"UTF-8\"?><?xml-stylesheet type=\"text/xsl\" href=\"trx-transform.xsl\"?>");
					File.WriteAllText(ResultFile + ".xml", content);
				]]>
			</Code>
		</Task>
	</UsingTask>

	<Target Name="deploy-test-results" >	
		<ItemGroup>
			<TestResult Include="TestResults\*.trx" />
		</ItemGroup>
		<PrepareTestResults ResultFile="%(TestResult.FullPath)" />
		
		<ItemGroup>
			<FormattedTestResult Include="TestResults\*.trx.xml" />
		</ItemGroup>
		<Copy
			SourceFiles="@(FormattedTestResult)"
			DestinationFolder="$(Deployment)" />

		<Copy
			SourceFiles="trx-transform.xsl"
			DestinationFolder="$(Deployment)" />
	</Target>
	
	<Target Name="save-build" Condition="Exists('$(InternalBuildTools)\references.targets')" DependsOnTargets="build-tools">		
		<SaveBuildArtifactTask
			RepositoryRoot="$(MSBuildProjectDirectory)\.."
			BuildArtifactType="sdk"
			GitBranch="$(SaveReferenceGitBranch)"
			LocalArchiveRootFolder="$(LocalArchiveRootFolder)"
			/>
	</Target>
	
	<Target Name="prepare-tests" Condition="'$(TestSettingsFile)' != ''">
		<Copy
			SourceFiles="$(TestSettingsFile)"
			DestinationFolder="$(TestSettingsLocation)" />
	</Target>

    
    <!-- DOCUMENTATION BUILD TARGETS -->
    
	<Target Name="doc-build" DependsOnTargets="build-docgenerator">
		<Message Text="Build documentation for all platforms, all assemblies"/>
		<Exec Command="$(DocGeneratorPath)\$(DocGenerator) -sdk $(SDKAssembliesRoot) -o $(DocOutputRoot) -sf $(DocSamplesFolder)" />
    </Target>

    <Target Name="create-sitemap" 
			DependsOnTargets="build-tools"
            AfterTargets="doc-build" 
            Condition="Exists('$(InternalBuildTools)\references.targets')">
        <CreateSitemapTask
            SourceFolder="$(DocOutputRoot)"
            BaseUrl="http://docs.aws.amazon.com/sdkfornet/latest/apidocs/"
            OutputFile="$(DocOutputRoot)\sitemap.xml"
            WaitForDebugger="false"
            />
	</Target>
    
    <Target Name="build-docgenerator">
		<Message Text="Building documentation generator"/>
		<MSBuild Projects="..\docgenerator\AWSSDKDocGenerator.sln"
			Targets="Clean;Build"
			Properties="Configuration=Release" />
    </Target>
    
	<Target Name="doc-platform-build" DependsOnTargets="build-docgenerator">
		<Message Text="Build documentation for selected platform, all services"/>
		<Exec Command="$(DocGeneratorPath)\$(DocGenerator) -sdk $(SDKAssembliesRoot) -o $(DocOutputRoot) -p $(SDKPlatform)" />
	</Target>

	<Target Name="doc-platform-service-build" DependsOnTargets="build-docgenerator">
		<Message Text="Build documentation for selected service(s) in platform"/>
		<Exec Command="$(DocGeneratorPath)\$(DocGenerator) -sdk $(SDKAssembliesRoot) -o $(DocOutputRoot) -p $(SDKPlatform) -svc $(SDKServices)" />
	</Target>
    
	<Target Name="test-doc-build" DependsOnTargets="build-docgenerator">
		<Message Text="Build documentation in test mode (net45 platform, selected services)"/>
		<Exec Command="$(DocGeneratorPath)\$(DocGenerator) -t  -sdk $(SDKAssembliesRoot) -sf $(DocSamplesFolder) -o $(DocOutputRoot) -v" />
	</Target>    
</Project>