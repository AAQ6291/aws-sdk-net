<#@ template language="C#" inherits="BaseGenerator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	AddLicenseHeader();
#>
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Text;
using System.IO;

using Amazon.Runtime;
using Amazon.Runtime.Internal;

namespace <#=this.Config.Namespace#>.Model
{
<#
	if(this.StructureType == StructureType.Request)
		this.FormatOperationRequestDocumentation(this.Operation);
	else if (this.Operation != null && GeneratorHelpers.HasSuppressedResult(this.Operation))
		this.FormatVoidResultDocumentation(this.Operation.Name);
	else
	    this.FormatClassDocumentation(this.Structure);  
#>
	public partial class <#=this.ClassName#><#=this.BaseClassString#>
	{
<#
        if(this.Structure != null)
        {
            if(this.IsWrapped)
            {
#>
        private <#=this.Structure.Name#> _response;
<#
            }
            else
            {
		        foreach(var member in this.Structure.Members)
                {
					if (member.IsExcluded)
						continue;
#>
        private <#=member.DetermineType()#><#= member.IsNullable ? "?" : "" #> <#=member.VariableName#><#= member.ShouldInstantiate ? string.Format(" = new {0}();", member.DetermineType()) : ";"#>
<#
                }
            }
        }
#>

<#
        if(this.Structure != null)
        {
            if(this.IsWrapped)
            {
#>
        public <#=this.Structure.Name#> <#=this.Structure.Name#>
        {
            get { return this._response; }
            set { this._response = value; }
        }
<#
            }
            else
            {
        AddSimpleRequestConstructors(this.ClassName, this.Structure, this.Config.Namespace);
		        foreach(var member in this.Structure.Members)
                {
					if (member.IsExcluded)
						continue;
#>
<# this.FormatPropertyDocumentation(member); #>
        <#=member.AccessModifier#> <#=member.DetermineType()#><#=member.UseNullable ? "?" : ""#> <#=member.PropertyName#>
        {
<#
                    if(member.IsNullable && !member.UseNullable)
                    {
#>
            get { return this.<#=member.VariableName#>.GetValueOrDefault(); }
<#
                    }
                    else
                    {
#>
            get { return this.<#=member.VariableName#>; }
<#
                    }
#>
            set { this.<#=member.VariableName#> = value; }
        }

        // Check to see if <#=member.PropertyName#> property is set
        internal bool IsSet<#=member.PropertyName#>()
        {
<#
                    if(member.IsNullable)
                    {
#>
            return this.<#=member.VariableName#>.HasValue; 
<#
                    }
                    else if(member.IsMap || member.IsList)
                    {
#>
            return this.<#=member.VariableName#> != null && this.<#=member.VariableName#>.Count > 0; 
<#
                    }
                    else
                    {
#>
            return this.<#=member.VariableName#> != null;
<#
                    }
#>
        }

<#
                }
            }
        }
#>
    }
}


<#+
    // Set to true when the service model specifies a shape that should be wrapped in a response. ElastiCache CreateCacheCluster is an example of this.
    public bool IsWrapped { get; set; }

	public Operation Operation { get; set; }
    public string ClassName { get; set; }
    public string BaseClass { get; set; }
    public Shape Structure { get; set; }
	public StructureType StructureType { get; set; }
#>