using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using AWSSDK_DotNet.IntegrationTests.Utils;
using AWSSDK_DotNet.IntegrationTests.Tests;

using Amazon;
using Amazon.MobileAnalytics;
using Amazon.MobileAnalytics.Model;
using Amazon.CognitoIdentity;

namespace AWSSDK_DotNet45.IntegrationTests.Tests
{
    [TestClass]
    public class MobileAnalytics : TestBase<AmazonMobileAnalyticsClient>
    {
        /*
         * The appID property is a generic value.
         * Please replace it with your appID generated by the Mobile Analytics console.
         */
        private static string appID = "111111111111111111111111";
        private static AmazonMobileAnalyticsClient mobileAnalyticsClient;
        private static ClientContextConfig clientConfiguration;
        private static ClientContext clientContext;
        //private static string clientContext = "{\"client\": {\"client_id\":\"1\",\"app_title\":\"analytics-test-app\"},\"env\":{\"platform\":\"iPhoneOS\"},\"services\": {\"mobile_analytics\": {\"app_id\":\"" + appID + "\"}}}";

        private static string STOP_SESSION = "_session.stop";
        private static string START_SESSION = "_session.start";
        private static string PAUSE_SESSION = "_session.pause";
        private static string RESUME_SESSION = "_session.resume";

        private static string SESSION_ID = "analytics_test_session";

        [ClassCleanup]
        public static void Cleanup()
        {
            BaseClean();
        }

        [ClassInitialize]
        public static void initializeClientContext(TestContext context)
        {
            clientConfiguration = new ClientContextConfig("1", "aws_dot_net_sdk_tooling", appID);
            clientContext = new ClientContext(clientConfiguration);
        }

        [TestInitialize]
        public void initializeClient()
        {
            mobileAnalyticsClient = new AmazonMobileAnalyticsClient(RegionEndpoint.USEast1);
        }

        [TestMethod]
        [TestCategory("MobileAnalytics")]
        public void TestPutEvents()
        {
            using (mobileAnalyticsClient)
            {
                //create the putEventRequest and get the clientContext
                PutEventsRequest putEventRequest = new PutEventsRequest();
                putEventRequest.ClientContext = clientContext.ToJsonString();

                //start the session
                Session eventStartSession = StartSession();

                //populate a custom event
                Event myEvent = new Event();
                myEvent.Session = eventStartSession;
                PopulateCustomEvent(myEvent);

                //put the event in the putEventRequest list
                putEventRequest.Events.Add(myEvent);

                //push the event list to mobile analytics service
                PutEventsResponse response = mobileAnalyticsClient.PutEvents(putEventRequest);
                Assert.AreEqual("accepted", response.HttpStatusCode.ToString(), true);

                //pause the session
                PauseSession(eventStartSession);

                //resume the session
                ResumeSession(eventStartSession);

                //end the session
                StopSession(eventStartSession);
            }
        }

        public Session StartSession()
        {
            PutEventsRequest putEventRequest = new PutEventsRequest();
            putEventRequest.ClientContext = clientContext.ToJsonString();

            DateTime currentTime = DateTime.Now;
            Event startSession = new Event
            {
                Timestamp = currentTime,
                EventType = START_SESSION,
                Session = new Session
                {
                    StartTimestamp = currentTime,
                    Id = SESSION_ID
                }
            };

            putEventRequest.Events.Add(startSession);
            PutEventsResponse r = mobileAnalyticsClient.PutEvents(putEventRequest);
            Assert.AreEqual("accepted", r.HttpStatusCode.ToString(), true);

            return startSession.Session;
        }

        private void PopulateCustomEvent(Event myEvent)
        {
            myEvent.EventType = "LevelComplete";
            myEvent.Version = "v2.0";
            myEvent.Timestamp = DateTime.Now;

            myEvent.Attributes.Add("LevelName", "Level1");
            myEvent.Attributes.Add("CharacterClass", "Warrior");
            myEvent.Attributes.Add("Successful", "True");

            myEvent.Metrics.Add("score", 12345);
            myEvent.Metrics.Add("TimeInLevel", 64);
        }

        private void PauseSession(Session startSession)
        {
            PutEventsRequest putEventRequest = new PutEventsRequest();
            putEventRequest.ClientContext = clientContext.ToJsonString();

            DateTime currentTime = DateTime.Now;
            Event pauseSession = new Event
            {
                Timestamp = currentTime,
                EventType = PAUSE_SESSION,
                Session = startSession,
            };
            pauseSession.Session.Id = SESSION_ID;

            putEventRequest.Events.Add(pauseSession);
            PutEventsResponse r = mobileAnalyticsClient.PutEvents(putEventRequest);
            Assert.AreEqual("accepted", r.HttpStatusCode.ToString(), true);
        }

        private void ResumeSession(Session startSession)
        {
            PutEventsRequest putEventRequest = new PutEventsRequest();
            putEventRequest.ClientContext = clientContext.ToJsonString();

            DateTime currentTime = DateTime.Now;
            Event resumeSession = new Event
            {
                Timestamp = currentTime,
                EventType = RESUME_SESSION,
                Session = startSession
            };
            resumeSession.Session.Id = SESSION_ID;

            putEventRequest.Events.Add(resumeSession);
            PutEventsResponse r = mobileAnalyticsClient.PutEvents(putEventRequest);
            Assert.AreEqual("accepted", r.HttpStatusCode.ToString(), true);
        }

        private void StopSession(Session startSession)
        {
            PutEventsRequest putEventRequest = new PutEventsRequest();
            putEventRequest.ClientContext = clientContext.ToJsonString();

            DateTime currentTime = DateTime.Now;
            Event stopSession = new Event
            {
                Timestamp = currentTime,
                EventType = STOP_SESSION,
                Session = startSession
            };
            stopSession.Session.Id = STOP_SESSION;

            putEventRequest.Events.Add(stopSession);
            PutEventsResponse r = mobileAnalyticsClient.PutEvents(putEventRequest);
            Assert.AreEqual("accepted", r.HttpStatusCode.ToString(), true);
        }

    }
}
