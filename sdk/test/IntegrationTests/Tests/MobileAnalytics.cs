using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using AWSSDK_DotNet.IntegrationTests.Utils;
using AWSSDK_DotNet.IntegrationTests.Tests;

using Amazon;
using Amazon.MobileAnalytics;
using Amazon.MobileAnalytics.Model;
using Amazon.CognitoIdentity;

namespace AWSSDK_DotNet45.IntegrationTests.Tests
{
    [TestClass]
    public class MobileAnalytics : TestBase<AmazonMobileAnalyticsClient>
    {
        /*
         * The appID property is a generic value.
         * Please replace it with your appID generated by the Mobile Analytics console.
         */
        private static string appID = "111111111111111111111111";
        private static AmazonMobileAnalyticsClient mobileAnalyticsClient;
        private static string clientContext = "{\"client\": {\"client_id\":\"1\",\"app_title\":\"analytics-test-app\"},\"env\":{\"platform\":\"iPhoneOS\"},\"services\": {\"mobile_analytics\": {\"app_id\":\"" + appID + "\"}}}";

        [ClassCleanup]
        public static void Cleanup()
        {
            BaseClean();
        }

        [ClassInitialize]
        public static void initializeClientsAndConstants(TestContext context)
        {
            mobileAnalyticsClient = new AmazonMobileAnalyticsClient(RegionEndpoint.USEast1);
        }

        [TestMethod]
        [TestCategory("MobileAnalytics")]
        public void TestPutEvents()
        {
            //create the putEventRequest and get the clientContext
            PutEventsRequest putEventRequest = new PutEventsRequest();
            putEventRequest.ClientContext = clientContext;

            //start the session
            Session eventStartSession = startSession();

            //grab some arbitary event
            Event myEvent = new Event();
            myEvent.Session = eventStartSession;
            createCustomEvent(myEvent);

            //put the event in the putEventRequest list
            putEventRequest.Events.Add(myEvent);

            //push the event list to mobile analytics service
            PutEventsResponse response = mobileAnalyticsClient.PutEvents(putEventRequest);
            Assert.AreEqual("accepted", response.HttpStatusCode.ToString(), true);

            //pause the session
            pauseSession(eventStartSession);

            //resume the session
            resumeSession(eventStartSession);

            //end the session
            stopSession(eventStartSession);

            //dispose the client
            mobileAnalyticsClient.Dispose();
        }

        [TestMethod]
        public Session startSession()
        {
            PutEventsRequest putEventRequest = new PutEventsRequest();
            putEventRequest.ClientContext = clientContext;

            Event startSession = new Event();
            DateTime currentTime = DateTime.Now;
            startSession.Timestamp = currentTime;
            startSession.EventType = "_session.start";
            startSession.Session = new Session();
            startSession.Session.StartTimestamp = currentTime;
            startSession.Session.Id = "analytics_testSession";

            putEventRequest.Events.Add(startSession);
            PutEventsResponse r = mobileAnalyticsClient.PutEvents(putEventRequest);
            Assert.AreEqual("accepted", r.HttpStatusCode.ToString(), true);

            return startSession.Session;
        }

        [TestMethod]
        private void createCustomEvent(Event myEvent)
        {
            myEvent.EventType = "LevelComplete";
            myEvent.Version = "v2.0";
            myEvent.Timestamp = DateTime.Now;

            myEvent.Attributes.Add("LevelName", "Level1");
            myEvent.Attributes.Add("CharacterClass", "Warrior");
            myEvent.Attributes.Add("Successful", "True");

            myEvent.Metrics.Add("score", 12345);
            myEvent.Metrics.Add("TimeInLevel", 64);
        }

        [TestMethod]
        private void pauseSession(Session startSession)
        {
            PutEventsRequest putEventRequest = new PutEventsRequest();
            putEventRequest.ClientContext = clientContext;

            Event endSession = new Event();
            DateTime currentTime = DateTime.Now;
            endSession.Timestamp = currentTime;
            endSession.EventType = "_session.pause";
            endSession.Session = startSession;
            endSession.Session.Id = "analytics_testSession";

            putEventRequest.Events.Add(endSession);
            PutEventsResponse r = mobileAnalyticsClient.PutEvents(putEventRequest);
            Assert.AreEqual("accepted", r.HttpStatusCode.ToString(), true);
        }

        [TestMethod]
        private void resumeSession(Session startSession)
        {
            PutEventsRequest putEventRequest = new PutEventsRequest();
            putEventRequest.ClientContext = clientContext;

            Event endSession = new Event();
            DateTime currentTime = DateTime.Now;
            endSession.Timestamp = currentTime;
            endSession.EventType = "_session.resume";
            endSession.Session = startSession;
            endSession.Session.Id = "analytics_testSession";

            putEventRequest.Events.Add(endSession);
            PutEventsResponse r = mobileAnalyticsClient.PutEvents(putEventRequest);
            Assert.AreEqual("accepted", r.HttpStatusCode.ToString(), true);
        }

        [TestMethod]
        private void stopSession(Session startSession)
        {
            PutEventsRequest putEventRequest = new PutEventsRequest();
            putEventRequest.ClientContext = clientContext;

            Event endSession = new Event();
            DateTime currentTime = DateTime.Now;
            endSession.Timestamp = currentTime;
            endSession.EventType = "_session.stop";
            endSession.Session = startSession;
            endSession.Session.StopTimestamp = currentTime;
            endSession.Session.Id = "analytics_testSession";

            putEventRequest.Events.Add(endSession);
            PutEventsResponse r = mobileAnalyticsClient.PutEvents(putEventRequest);
            Assert.AreEqual("accepted", r.HttpStatusCode.ToString(), true);
        }

    }
}
